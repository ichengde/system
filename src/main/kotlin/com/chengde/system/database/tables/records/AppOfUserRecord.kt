/*
 * This file is generated by jOOQ.
 */
package com.chengde.system.database.tables.records


import com.chengde.system.database.tables.AppOfUser

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppOfUserRecord() : UpdatableRecordImpl<AppOfUserRecord>(AppOfUser.APP_OF_USER), Record3<Int?, Int?, Int?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var appId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, Int?> = super.fieldsRow() as Row3<Int?, Int?, Int?>
    override fun valuesRow(): Row3<Int?, Int?, Int?> = super.valuesRow() as Row3<Int?, Int?, Int?>
    override fun field1(): Field<Int?> = AppOfUser.APP_OF_USER.ID
    override fun field2(): Field<Int?> = AppOfUser.APP_OF_USER.USER_ID
    override fun field3(): Field<Int?> = AppOfUser.APP_OF_USER.APP_ID
    override fun component1(): Int? = id
    override fun component2(): Int? = userId
    override fun component3(): Int? = appId
    override fun value1(): Int? = id
    override fun value2(): Int? = userId
    override fun value3(): Int? = appId

    override fun value1(value: Int?): AppOfUserRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): AppOfUserRecord {
        this.userId = value
        return this
    }

    override fun value3(value: Int?): AppOfUserRecord {
        this.appId = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?): AppOfUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AppOfUserRecord
     */
    constructor(id: Int? = null, userId: Int? = null, appId: Int? = null): this() {
        this.id = id
        this.userId = userId
        this.appId = appId
    }
}
