/*
 * This file is generated by jOOQ.
 */
package com.chengde.system.database.tables.records


import com.chengde.system.database.tables.Note

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NoteRecord() : UpdatableRecordImpl<NoteRecord>(Note.NOTE), Record8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?> {

    var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var content: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var createtime: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    var userid: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var type: Short?
        set(value): Unit = set(5, value)
        get(): Short? = get(5) as Short?

    var version: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    var updatetime: LocalDate?
        set(value): Unit = set(7, value)
        get(): LocalDate? = get(7) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?> = super.fieldsRow() as Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?>
    override fun valuesRow(): Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?> = super.valuesRow() as Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?>
    override fun field1(): Field<String?> = Note.NOTE.ID
    override fun field2(): Field<String?> = Note.NOTE.TITLE
    override fun field3(): Field<String?> = Note.NOTE.CONTENT
    override fun field4(): Field<LocalDate?> = Note.NOTE.CREATETIME
    override fun field5(): Field<String?> = Note.NOTE.USERID
    override fun field6(): Field<Short?> = Note.NOTE.TYPE
    override fun field7(): Field<Int?> = Note.NOTE.VERSION
    override fun field8(): Field<LocalDate?> = Note.NOTE.UPDATETIME
    override fun component1(): String? = id
    override fun component2(): String? = title
    override fun component3(): String? = content
    override fun component4(): LocalDate? = createtime
    override fun component5(): String? = userid
    override fun component6(): Short? = type
    override fun component7(): Int? = version
    override fun component8(): LocalDate? = updatetime
    override fun value1(): String? = id
    override fun value2(): String? = title
    override fun value3(): String? = content
    override fun value4(): LocalDate? = createtime
    override fun value5(): String? = userid
    override fun value6(): Short? = type
    override fun value7(): Int? = version
    override fun value8(): LocalDate? = updatetime

    override fun value1(value: String?): NoteRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): NoteRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): NoteRecord {
        this.content = value
        return this
    }

    override fun value4(value: LocalDate?): NoteRecord {
        this.createtime = value
        return this
    }

    override fun value5(value: String?): NoteRecord {
        this.userid = value
        return this
    }

    override fun value6(value: Short?): NoteRecord {
        this.type = value
        return this
    }

    override fun value7(value: Int?): NoteRecord {
        this.version = value
        return this
    }

    override fun value8(value: LocalDate?): NoteRecord {
        this.updatetime = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: LocalDate?, value5: String?, value6: Short?, value7: Int?, value8: LocalDate?): NoteRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised NoteRecord
     */
    constructor(id: String? = null, title: String? = null, content: String? = null, createtime: LocalDate? = null, userid: String? = null, type: Short? = null, version: Int? = null, updatetime: LocalDate? = null): this() {
        this.id = id
        this.title = title
        this.content = content
        this.createtime = createtime
        this.userid = userid
        this.type = type
        this.version = version
        this.updatetime = updatetime
    }
}
