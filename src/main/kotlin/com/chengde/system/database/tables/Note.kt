/*
 * This file is generated by jOOQ.
 */
package com.chengde.system.database.tables


import com.chengde.system.database.Public
import com.chengde.system.database.keys.NOTE_PKEY
import com.chengde.system.database.tables.records.NoteRecord

import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Note(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, NoteRecord>?,
    aliased: Table<NoteRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<NoteRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.note</code>
         */
        val NOTE: Note = Note()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<NoteRecord> = NoteRecord::class.java

    /**
     * The column <code>public.note.id</code>.
     */
    val ID: TableField<NoteRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.field("generate_object_id()", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.note.title</code>.
     */
    val TITLE: TableField<NoteRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(1000), this, "")

    /**
     * The column <code>public.note.content</code>.
     */
    val CONTENT: TableField<NoteRecord, String?> = createField(DSL.name("content"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.note.createTime</code>.
     */
    val CREATETIME: TableField<NoteRecord, LocalDate?> = createField(DSL.name("createTime"), SQLDataType.LOCALDATE.defaultValue(DSL.field("now()", SQLDataType.LOCALDATE)), this, "")

    /**
     * The column <code>public.note.userId</code>.
     */
    val USERID: TableField<NoteRecord, String?> = createField(DSL.name("userId"), SQLDataType.VARCHAR(30), this, "")

    /**
     * The column <code>public.note.type</code>.
     */
    val TYPE: TableField<NoteRecord, Short?> = createField(DSL.name("type"), SQLDataType.SMALLINT, this, "")

    /**
     * The column <code>public.note.version</code>.
     */
    val VERSION: TableField<NoteRecord, Int?> = createField(DSL.name("version"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.note.updateTime</code>.
     */
    val UPDATETIME: TableField<NoteRecord, LocalDate?> = createField(DSL.name("updateTime"), SQLDataType.LOCALDATE, this, "")

    private constructor(alias: Name, aliased: Table<NoteRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<NoteRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.note</code> table reference
     */
    constructor(): this(DSL.name("note"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, NoteRecord>): this(Internal.createPathAlias(child, key), child, key, NOTE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<NoteRecord> = NOTE_PKEY
    override fun `as`(alias: String): Note = Note(DSL.name(alias), this)
    override fun `as`(alias: Name): Note = Note(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Note = Note(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Note = Note(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?> = super.fieldsRow() as Row8<String?, String?, String?, LocalDate?, String?, Short?, Int?, LocalDate?>
}
