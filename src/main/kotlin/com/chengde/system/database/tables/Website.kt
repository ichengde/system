/*
 * This file is generated by jOOQ.
 */
package com.chengde.system.database.tables


import com.chengde.system.database.Public
import com.chengde.system.database.keys.WEBSITE_PKEY
import com.chengde.system.database.tables.records.WebsiteRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Website(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WebsiteRecord>?,
    aliased: Table<WebsiteRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WebsiteRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.website</code>
         */
        val WEBSITE: Website = Website()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WebsiteRecord> = WebsiteRecord::class.java

    /**
     * The column <code>public.website.name</code>.
     */
    val NAME: TableField<WebsiteRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.website.site</code>.
     */
    val SITE: TableField<WebsiteRecord, String?> = createField(DSL.name("site"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<WebsiteRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WebsiteRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.website</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.website</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.website</code> table reference
     */
    constructor(): this(DSL.name("website"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WebsiteRecord>): this(Internal.createPathAlias(child, key), child, key, WEBSITE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<WebsiteRecord> = WEBSITE_PKEY
    override fun `as`(alias: String): Website = Website(DSL.name(alias), this)
    override fun `as`(alias: Name): Website = Website(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Website = Website(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Website = Website(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
}
